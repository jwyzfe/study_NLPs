{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"provenance":[],"authorship_tag":"ABX9TyOOIVXOdGkYqPuxZYi8g8dS","include_colab_link":true},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<a href=\"https://colab.research.google.com/github/jwyzfe/study_NLPs/blob/main/codes/Deeplearning/03_Regression_Linear_diatetes.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>","metadata":{"id":"view-in-github"}},{"cell_type":"markdown","source":"## 데이터 수집","metadata":{"id":"z4BUmwQmJXIv"}},{"cell_type":"code","source":"from sklearn.datasets import load_diabetes\ndata_diabetes = load_diabetes()\nfeatures, label = data_diabetes.data, data_diabetes.target\nfeatures.shape, label.shape","metadata":{"id":"jC2Cdhl1J3e2","outputId":"daa9fabd-60af-408d-cd48-bdd63206f45f","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{"id":"g6C8ZCpbJ3K9"}},{"cell_type":"markdown","source":"###데이터 전처리\n- 데이터 분석","metadata":{"id":"xYqsjBL6JZ99"}},{"cell_type":"markdown","source":"## 데이터 분할\n- train, test, validation","metadata":{"id":"slpnTMUFJcx1"}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\ntrain_features, test_features, train_label, test_label = train_test_split(features, label, test_size=0.2, random_state=42)","metadata":{"id":"8_Q6RPQQKuKO","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch","metadata":{"id":"1PLymSg7LbA2","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_features_tensor = torch.tensor(train_features, dtype=torch.float32)\ntrain_label_tensor = torch.tensor(train_label,dtype=torch.float32).view(-1,1) # 행렬 모양으로 변경\n#test_features_tensor = torch.tensor(test_features)\n#test_label_tensor = torch.tensor(test_label)\ntype(train_features_tensor), type(train_label_tensor), train_label_tensor.shape","metadata":{"id":"O7KPVPkDLzom","outputId":"3d9eaec2-5b57-4e68-977c-1c82881711eb","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 모델 학습","metadata":{"id":"HqrN4d3DJtTe"}},{"cell_type":"code","source":"# Neural model linear regression \nclass LinearRegressionNNM(torch.nn.Module):\n  def __init__(self, input_dim, ):  # input_dim:reatures 열 갯수\n    super(LinearRegressionNNM, self).__init__()\n    self.hidden_1 = torch.nn.Linear(input_dim, 64)\n    self.hidden_2 = torch.nn.Linear(64, 32)\n    self.hidden_3 = torch.nn.Linear(32, 16)\n    self.output = torch.nn.Linear(16, 1)\n    self.relu = torch.nn.ReLU() #Activation Function\n    \n      \n      \n\n  def forward(self, x):\n    x = self.relu(self.hidden_1(x)) #hidden layer1\n    x = self.relu(self.hidden_2(x))\n    x = self.relu(self.hidden_3(x))\n    out = self.output(x)  #result\n    return out","metadata":{"id":"wq2KAqWiMNgO","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_features_tensor.shape, train_label_tensor.shape","metadata":{"id":"kKd68ImLOVWO","outputId":"9920b2de-6557-4523-b0b4-19f27c178bad","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model = LinearRegressionNNM(10)","metadata":{"id":"qFqGlB__OL0v","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model","metadata":{"id":"ZoOOlceGPO8f","outputId":"01a06664-39ac-4e32-b858-a4f8756423d2","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"criterion = torch.nn.MSELoss()  #Loss function\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01) #optimizer function","metadata":{"id":"_n7zuoxBVgVI","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for epoch in range(10000):\n  # Forward pass: Compute predicted y by passing x to the model\n  pred_y = model(train_features_tensor)\n\n  #Compute and print loss\n  loss = criterion(pred_y, train_label_tensor)\n    \n  optimizer.zero_grad()\n  loss.backward()\n  optimizer.step()\n  if epoch % 100 == 0:\n    print('epoch: {}, loss:{}'.format(epoch, loss.item()))","metadata":{"id":"umDdlYBwWs4f","outputId":"aee876f1-8ad2-474e-d2ea-2c93082d3fcd","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 모델 평가","metadata":{"id":"QGVzMK63JvCO"}},{"cell_type":"code","source":"model.eval()","metadata":{"id":"SQRNawOmZPeB","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"with torch.no_grad(): #학습 목적 아닌 평가 목적 위해 고정\n  pred_y = model(train_features_tensor)\n  loss = criterion(pred_y, train_label_tensor) # 예측도 같은 Loss function\n  print(f'Loss: {loss.item()}')","metadata":{"id":"hgJePQqEZRqo","outputId":"f40677eb-5fae-4df5-d8d3-6babcfa2457c","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 모델 배포","metadata":{"id":"7KOfO9o1JwJX"}},{"cell_type":"code","source":"","metadata":{"id":"CVsb3desJTXs","trusted":true},"outputs":[],"execution_count":null}]}