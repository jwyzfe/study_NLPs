{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"provenance":[],"authorship_tag":"ABX9TyOOIVXOdGkYqPuxZYi8g8dS","include_colab_link":true},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"},{"sourceId":248755,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":212623,"modelId":234272},{"sourceId":248759,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":212627,"modelId":234276}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<a href=\"https://colab.research.google.com/github/jwyzfe/study_NLPs/blob/main/codes/Deeplearning/03_Regression_Linear_diatetes.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>","metadata":{"id":"view-in-github"}},{"cell_type":"markdown","source":"## 데이터 수집","metadata":{"id":"z4BUmwQmJXIv"}},{"cell_type":"code","source":"import pandas as pd\n\n# 데이터 로드\n   # Kaggle 환경\ntrain_path =  '/kaggle/input/house-prices-advanced-regression-techniques/train.csv'\ntest_path = '/kaggle/input/house-prices-advanced-regression-techniques/test.csv'\n\n\n\n","metadata":{"id":"jC2Cdhl1J3e2","outputId":"daa9fabd-60af-408d-cd48-bdd63206f45f","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:53.001371Z","iopub.execute_input":"2025-02-03T07:45:53.001683Z","iopub.status.idle":"2025-02-03T07:45:54.273405Z","shell.execute_reply.started":"2025-02-03T07:45:53.001623Z","shell.execute_reply":"2025-02-03T07:45:54.272268Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import pandas as pd\n\ntrain_df = pd.read_csv(train_path)\ntest_df = pd.read_csv(test_path)\ntrain_df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.274378Z","iopub.execute_input":"2025-02-03T07:45:54.274790Z","iopub.status.idle":"2025-02-03T07:45:54.391675Z","shell.execute_reply.started":"2025-02-03T07:45:54.274763Z","shell.execute_reply":"2025-02-03T07:45:54.390558Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1460 entries, 0 to 1459\nData columns (total 81 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Id             1460 non-null   int64  \n 1   MSSubClass     1460 non-null   int64  \n 2   MSZoning       1460 non-null   object \n 3   LotFrontage    1201 non-null   float64\n 4   LotArea        1460 non-null   int64  \n 5   Street         1460 non-null   object \n 6   Alley          91 non-null     object \n 7   LotShape       1460 non-null   object \n 8   LandContour    1460 non-null   object \n 9   Utilities      1460 non-null   object \n 10  LotConfig      1460 non-null   object \n 11  LandSlope      1460 non-null   object \n 12  Neighborhood   1460 non-null   object \n 13  Condition1     1460 non-null   object \n 14  Condition2     1460 non-null   object \n 15  BldgType       1460 non-null   object \n 16  HouseStyle     1460 non-null   object \n 17  OverallQual    1460 non-null   int64  \n 18  OverallCond    1460 non-null   int64  \n 19  YearBuilt      1460 non-null   int64  \n 20  YearRemodAdd   1460 non-null   int64  \n 21  RoofStyle      1460 non-null   object \n 22  RoofMatl       1460 non-null   object \n 23  Exterior1st    1460 non-null   object \n 24  Exterior2nd    1460 non-null   object \n 25  MasVnrType     588 non-null    object \n 26  MasVnrArea     1452 non-null   float64\n 27  ExterQual      1460 non-null   object \n 28  ExterCond      1460 non-null   object \n 29  Foundation     1460 non-null   object \n 30  BsmtQual       1423 non-null   object \n 31  BsmtCond       1423 non-null   object \n 32  BsmtExposure   1422 non-null   object \n 33  BsmtFinType1   1423 non-null   object \n 34  BsmtFinSF1     1460 non-null   int64  \n 35  BsmtFinType2   1422 non-null   object \n 36  BsmtFinSF2     1460 non-null   int64  \n 37  BsmtUnfSF      1460 non-null   int64  \n 38  TotalBsmtSF    1460 non-null   int64  \n 39  Heating        1460 non-null   object \n 40  HeatingQC      1460 non-null   object \n 41  CentralAir     1460 non-null   object \n 42  Electrical     1459 non-null   object \n 43  1stFlrSF       1460 non-null   int64  \n 44  2ndFlrSF       1460 non-null   int64  \n 45  LowQualFinSF   1460 non-null   int64  \n 46  GrLivArea      1460 non-null   int64  \n 47  BsmtFullBath   1460 non-null   int64  \n 48  BsmtHalfBath   1460 non-null   int64  \n 49  FullBath       1460 non-null   int64  \n 50  HalfBath       1460 non-null   int64  \n 51  BedroomAbvGr   1460 non-null   int64  \n 52  KitchenAbvGr   1460 non-null   int64  \n 53  KitchenQual    1460 non-null   object \n 54  TotRmsAbvGrd   1460 non-null   int64  \n 55  Functional     1460 non-null   object \n 56  Fireplaces     1460 non-null   int64  \n 57  FireplaceQu    770 non-null    object \n 58  GarageType     1379 non-null   object \n 59  GarageYrBlt    1379 non-null   float64\n 60  GarageFinish   1379 non-null   object \n 61  GarageCars     1460 non-null   int64  \n 62  GarageArea     1460 non-null   int64  \n 63  GarageQual     1379 non-null   object \n 64  GarageCond     1379 non-null   object \n 65  PavedDrive     1460 non-null   object \n 66  WoodDeckSF     1460 non-null   int64  \n 67  OpenPorchSF    1460 non-null   int64  \n 68  EnclosedPorch  1460 non-null   int64  \n 69  3SsnPorch      1460 non-null   int64  \n 70  ScreenPorch    1460 non-null   int64  \n 71  PoolArea       1460 non-null   int64  \n 72  PoolQC         7 non-null      object \n 73  Fence          281 non-null    object \n 74  MiscFeature    54 non-null     object \n 75  MiscVal        1460 non-null   int64  \n 76  MoSold         1460 non-null   int64  \n 77  YrSold         1460 non-null   int64  \n 78  SaleType       1460 non-null   object \n 79  SaleCondition  1460 non-null   object \n 80  SalePrice      1460 non-null   int64  \ndtypes: float64(3), int64(35), object(43)\nmemory usage: 924.0+ KB\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"# 데이터 전처리 (필요한 부분만 사용)\n\n# 중요한 feature column들만 선택\nfeature_columns = ['LotArea', 'GrLivArea', 'TotRmsAbvGrd', 'OverallQual']\n\ntrain_features = train_path[feature_columns]  \ntrain_label = train_path['SalePrice']  \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.392760Z","iopub.execute_input":"2025-02-03T07:45:54.393159Z","iopub.status.idle":"2025-02-03T07:45:54.512351Z","shell.execute_reply.started":"2025-02-03T07:45:54.393122Z","shell.execute_reply":"2025-02-03T07:45:54.509703Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-c5139021c6dd>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mfeature_columns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'LotArea'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'GrLivArea'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'TotRmsAbvGrd'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'OverallQual'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# 데이터 전처리 (선택한 feature column만 사용)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mtrain_features\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_path\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfeature_columns\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# feature_columns에서 필요한 열만 선택\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mtrain_label\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_path\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'SalePrice'\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# 레이블은 'SalePrice'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: string indices must be integers"],"ename":"TypeError","evalue":"string indices must be integers","output_type":"error"}],"execution_count":3},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\n\n# 데이터 타입이 문자열인 열을 찾고 해당 열을 제거\ntrain_features = train_features.select_dtypes(exclude=['object'])\n\n# 정규화\nscaler = StandardScaler()\ntrain_features_scaled = scaler.fit_transform(train_features)\n\n# 텐서로 변환\ntrain_features_tensor = torch.tensor(train_features_scaled, dtype=torch.float32)\n\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.513098Z","iopub.status.idle":"2025-02-03T07:45:54.513651Z","shell.execute_reply":"2025-02-03T07:45:54.513499Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\n\n# 결측치를 처리한 후 스케일링\ntrain_features_scaled = train_features.copy()\nscaler = StandardScaler()\ntrain_features_scaled[numeric_cols] = scaler.fit_transform(train_features_scaled[numeric_cols])\n\n# 결측치 및 스케일링 결과 확인\nprint(train_features_scaled.isnull().sum())  # 결측치가 없는지 확인\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.514712Z","iopub.status.idle":"2025-02-03T07:45:54.515182Z","shell.execute_reply":"2025-02-03T07:45:54.514944Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# NaN 또는 Inf가 있는지 확인\nprint(torch.isnan(train_features_tensor).any())\nprint(torch.isinf(train_features_tensor).any())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.515897Z","iopub.status.idle":"2025-02-03T07:45:54.516351Z","shell.execute_reply":"2025-02-03T07:45:54.516168Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# NaN 값이 있는지 확인\nprint(train_features.isnull().sum())\n\n# NaN 값을 채우고 텐서로 변환\ntrain_features[numeric_cols] = train_features[numeric_cols].fillna(train_features[numeric_cols].mean())\ntrain_features_tensor = torch.tensor(train_features.values, dtype=torch.float32)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.517236Z","iopub.status.idle":"2025-02-03T07:45:54.517658Z","shell.execute_reply":"2025-02-03T07:45:54.517480Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{"id":"g6C8ZCpbJ3K9"}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\ntrain_features, test_features, train_label, test_label = train_test_split(features, label, test_size=0.2, random_state=42)","metadata":{"id":"8_Q6RPQQKuKO","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.518327Z","iopub.status.idle":"2025-02-03T07:45:54.518769Z","shell.execute_reply":"2025-02-03T07:45:54.518592Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import torch","metadata":{"id":"1PLymSg7LbA2","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.520121Z","iopub.status.idle":"2025-02-03T07:45:54.520540Z","shell.execute_reply":"2025-02-03T07:45:54.520345Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 연속형 데이터만 선택\ntrain_features_numeric = train_features.select_dtypes(include=['float64', 'int64'])\n\n# numpy 배열로 변환 후 tensor로 변환\ntrain_features_tensor = torch.tensor(train_features_numeric.values, dtype=torch.float32)\ntrain_label_tensor = torch.tensor(train_label.values, dtype=torch.float32).view(-1, 1)  # 행렬 모양으로 변경\n\n# 확인\ntype(train_features_tensor), type(train_label_tensor), train_label_tensor.shape\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.521241Z","iopub.status.idle":"2025-02-03T07:45:54.521680Z","shell.execute_reply":"2025-02-03T07:45:54.521465Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport torch\n\n# 데이터 경로 지정\ndata_path = '/kaggle/input/house-prices-advanced-regression-techniques/train.csv'\n\n# 데이터를 pandas로 읽어오기\ndata = pd.read_csv(data_path)\n\n# 레이블 컬럼을 지정\ntrain_labels = data['SalePrice']  # 예시로 'SalePrice' 컬럼을 사용\n\n# 텐서로 변환\ntrain_labels_tensor = torch.tensor(train_labels.values, dtype=torch.float32)\n\n# 결과 출력\nprint(train_labels_tensor)","metadata":{"id":"O7KPVPkDLzom","outputId":"3d9eaec2-5b57-4e68-977c-1c82881711eb","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.522559Z","iopub.status.idle":"2025-02-03T07:45:54.523001Z","shell.execute_reply":"2025-02-03T07:45:54.522815Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 모델 학습","metadata":{"id":"HqrN4d3DJtTe"}},{"cell_type":"code","source":"\nclass LinearRegressionNNM(torch.nn.Module) :\n    def __init__(self, input_dim): \n        super(LinearRegressionNNM, self).__init__()\n        # super(self).__init__()\n        self.hidden_1 = torch.nn.Linear(input_dim, 64) \n        self.hidden_2 = torch.nn.Linear(64, 32) \n        self.hidden_3 = torch.nn.Linear(32, 16) \n        self.output = torch.nn.Linear(16, 1) \n        self.relu = torch.nn.ReLU() . \n\n    def forward(self, x):\n        x = self.relu(self.hidden_1(x)) \n        x = self.relu(self.hidden_2(x)) \n        x = self.relu(self.hidden_3(x)) \n        out = self.output(x) \n        \n        return out\n","metadata":{"id":"wq2KAqWiMNgO","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.523948Z","iopub.status.idle":"2025-02-03T07:45:54.524476Z","shell.execute_reply":"2025-02-03T07:45:54.524223Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_features_tensor.shape, train_label_tensor.shape","metadata":{"id":"kKd68ImLOVWO","outputId":"9920b2de-6557-4523-b0b4-19f27c178bad","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.525427Z","iopub.status.idle":"2025-02-03T07:45:54.525897Z","shell.execute_reply":"2025-02-03T07:45:54.525692Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model = LinearRegressionNNM(10)","metadata":{"id":"qFqGlB__OL0v","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.526803Z","iopub.status.idle":"2025-02-03T07:45:54.527259Z","shell.execute_reply":"2025-02-03T07:45:54.527071Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"model","metadata":{"id":"ZoOOlceGPO8f","outputId":"01a06664-39ac-4e32-b858-a4f8756423d2","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.528156Z","iopub.status.idle":"2025-02-03T07:45:54.528587Z","shell.execute_reply":"2025-02-03T07:45:54.528398Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"criterion = torch.nn.MSELoss()  #Loss function\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01) #optimizer function","metadata":{"id":"_n7zuoxBVgVI","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.529565Z","iopub.status.idle":"2025-02-03T07:45:54.529969Z","shell.execute_reply":"2025-02-03T07:45:54.529796Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 모델 정의 시 입력 차원을 train_features_tensor의 특성 수로 설정\nmodel = LinearRegressionNNM(train_features_tensor.shape[1])  # train_features_tensor.shape[1]은 특성 수입니다.\n\n# 나머지 코드는 그대로\ncriterion = torch.nn.MSELoss()  # Loss function\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)  # optimizer function\n\nfor epoch in range(10000):\n    # Forward pass: Compute predicted y by passing x to the model\n    pred_y = model(train_features_tensor)\n\n    # Compute and print loss\n    loss = criterion(pred_y, train_label_tensor)\n\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n\n    if epoch % 100 == 0:\n        print('epoch: {}, loss:{}'.format(epoch, loss.item()))","metadata":{"id":"umDdlYBwWs4f","outputId":"aee876f1-8ad2-474e-d2ea-2c93082d3fcd","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.531244Z","iopub.status.idle":"2025-02-03T07:45:54.531690Z","shell.execute_reply":"2025-02-03T07:45:54.531488Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 모델 평가","metadata":{"id":"QGVzMK63JvCO"}},{"cell_type":"code","source":"model.eval()","metadata":{"id":"SQRNawOmZPeB","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.532423Z","iopub.status.idle":"2025-02-03T07:45:54.532840Z","shell.execute_reply":"2025-02-03T07:45:54.532664Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"with torch.no_grad(): #학습 목적 아닌 평가 목적 위해 고정\n  pred_y = model(train_features_tensor)\n  loss = criterion(pred_y, train_label_tensor) # 예측도 같은 Loss function\n  print(f'Loss: {loss.item()}')","metadata":{"id":"hgJePQqEZRqo","outputId":"f40677eb-5fae-4df5-d8d3-6babcfa2457c","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:45:54.533670Z","iopub.status.idle":"2025-02-03T07:45:54.534089Z","shell.execute_reply":"2025-02-03T07:45:54.533897Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 모델 배포","metadata":{"id":"7KOfO9o1JwJX"}},{"cell_type":"code","source":"select_test_df = test_df[feature_columns]\nselect_test_df.info()","metadata":{"id":"CVsb3desJTXs","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T07:48:34.630462Z","iopub.execute_input":"2025-02-03T07:48:34.630811Z","iopub.status.idle":"2025-02-03T07:48:34.642954Z","shell.execute_reply.started":"2025-02-03T07:48:34.630784Z","shell.execute_reply":"2025-02-03T07:48:34.641761Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1459 entries, 0 to 1458\nData columns (total 4 columns):\n #   Column        Non-Null Count  Dtype\n---  ------        --------------  -----\n 0   LotArea       1459 non-null   int64\n 1   GrLivArea     1459 non-null   int64\n 2   TotRmsAbvGrd  1459 non-null   int64\n 3   OverallQual   1459 non-null   int64\ndtypes: int64(4)\nmemory usage: 45.7 KB\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}