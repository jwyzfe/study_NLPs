{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":7084494,"sourceType":"datasetVersion","datasetId":4081618}],"dockerImageVersionId":30840,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## simple RNN\n- dataset : https://www.kaggle.com/datasets/iveeaten3223times/massive-yahoo-finance-dataset\n- 연속형(시계열, 문장 등) 데이터 처리에 유리","metadata":{}},{"cell_type":"markdown","source":"## 데이터 관련","metadata":{}},{"cell_type":"code","source":"# 데이터 로드\nimport pandas as pd\ndf_stock_all = pd.read_csv('/kaggle/input/massive-yahoo-finance-dataset/stock_details_5_years.csv')\ndf_stock_all.head(3)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:43:56.133165Z","iopub.execute_input":"2025-02-04T03:43:56.133492Z","iopub.status.idle":"2025-02-04T03:43:56.774805Z","shell.execute_reply.started":"2025-02-04T03:43:56.133466Z","shell.execute_reply":"2025-02-04T03:43:56.774084Z"}},"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"                        Date        Open        High         Low       Close  \\\n0  2018-11-29 00:00:00-05:00   43.829761   43.863354   42.639594   43.083508   \n1  2018-11-29 00:00:00-05:00  104.769074  105.519257  103.534595  104.636131   \n2  2018-11-29 00:00:00-05:00   54.176498   55.007500   54.099998   54.729000   \n\n      Volume  Dividends  Stock Splits Company  \n0  167080000        0.0           0.0    AAPL  \n1   28123200        0.0           0.0    MSFT  \n2   31004000        0.0           0.0   GOOGL  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n      <th>Dividends</th>\n      <th>Stock Splits</th>\n      <th>Company</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2018-11-29 00:00:00-05:00</td>\n      <td>43.829761</td>\n      <td>43.863354</td>\n      <td>42.639594</td>\n      <td>43.083508</td>\n      <td>167080000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2018-11-29 00:00:00-05:00</td>\n      <td>104.769074</td>\n      <td>105.519257</td>\n      <td>103.534595</td>\n      <td>104.636131</td>\n      <td>28123200</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>MSFT</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2018-11-29 00:00:00-05:00</td>\n      <td>54.176498</td>\n      <td>55.007500</td>\n      <td>54.099998</td>\n      <td>54.729000</td>\n      <td>31004000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>GOOGL</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":33},{"cell_type":"code","source":"# 특정 회사 시계열 가져오기\nselected_company = 'AAPL'\ndf_stock = df_stock_all[df_stock_all['Company'] == selected_company].copy()\ndf_stock.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:43:56.775762Z","iopub.execute_input":"2025-02-04T03:43:56.776124Z","iopub.status.idle":"2025-02-04T03:43:56.828333Z","shell.execute_reply.started":"2025-02-04T03:43:56.776099Z","shell.execute_reply":"2025-02-04T03:43:56.827332Z"}},"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"                           Date       Open       High        Low      Close  \\\n0     2018-11-29 00:00:00-05:00  43.829761  43.863354  42.639594  43.083508   \n458   2018-11-30 00:00:00-05:00  43.261071  43.270671  42.478826  42.850754   \n916   2018-12-03 00:00:00-05:00  44.261681  44.376858  43.481835  44.348064   \n1374  2018-12-04 00:00:00-05:00  43.419445  43.764977  42.296468  42.397247   \n1832  2018-12-06 00:00:00-05:00  41.214280  41.938938  40.892744  41.924541   \n\n         Volume  Dividends  Stock Splits Company  \n0     167080000        0.0           0.0    AAPL  \n458   158126000        0.0           0.0    AAPL  \n916   163210000        0.0           0.0    AAPL  \n1374  165377200        0.0           0.0    AAPL  \n1832  172393600        0.0           0.0    AAPL  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n      <th>Dividends</th>\n      <th>Stock Splits</th>\n      <th>Company</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2018-11-29 00:00:00-05:00</td>\n      <td>43.829761</td>\n      <td>43.863354</td>\n      <td>42.639594</td>\n      <td>43.083508</td>\n      <td>167080000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>458</th>\n      <td>2018-11-30 00:00:00-05:00</td>\n      <td>43.261071</td>\n      <td>43.270671</td>\n      <td>42.478826</td>\n      <td>42.850754</td>\n      <td>158126000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>916</th>\n      <td>2018-12-03 00:00:00-05:00</td>\n      <td>44.261681</td>\n      <td>44.376858</td>\n      <td>43.481835</td>\n      <td>44.348064</td>\n      <td>163210000</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>1374</th>\n      <td>2018-12-04 00:00:00-05:00</td>\n      <td>43.419445</td>\n      <td>43.764977</td>\n      <td>42.296468</td>\n      <td>42.397247</td>\n      <td>165377200</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>1832</th>\n      <td>2018-12-06 00:00:00-05:00</td>\n      <td>41.214280</td>\n      <td>41.938938</td>\n      <td>40.892744</td>\n      <td>41.924541</td>\n      <td>172393600</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":34},{"cell_type":"markdown","source":"#### 데이터 전처리","metadata":{}},{"cell_type":"code","source":"# 날짜를 datetime 변환\ndf_stock['Date'] = pd.to_datetime(df_stock['Date'], utc=True)\ndf_stock['Date'].dtype","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:43:56.829581Z","iopub.execute_input":"2025-02-04T03:43:56.829795Z","iopub.status.idle":"2025-02-04T03:43:56.844424Z","shell.execute_reply.started":"2025-02-04T03:43:56.829776Z","shell.execute_reply":"2025-02-04T03:43:56.843657Z"}},"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"datetime64[ns, UTC]"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"df_stock.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:43:56.845491Z","iopub.execute_input":"2025-02-04T03:43:56.845696Z","iopub.status.idle":"2025-02-04T03:43:56.861803Z","shell.execute_reply.started":"2025-02-04T03:43:56.845678Z","shell.execute_reply":"2025-02-04T03:43:56.861063Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 1258 entries, 0 to 602471\nData columns (total 9 columns):\n #   Column        Non-Null Count  Dtype              \n---  ------        --------------  -----              \n 0   Date          1258 non-null   datetime64[ns, UTC]\n 1   Open          1258 non-null   float64            \n 2   High          1258 non-null   float64            \n 3   Low           1258 non-null   float64            \n 4   Close         1258 non-null   float64            \n 5   Volume        1258 non-null   int64              \n 6   Dividends     1258 non-null   float64            \n 7   Stock Splits  1258 non-null   float64            \n 8   Company       1258 non-null   object             \ndtypes: datetime64[ns, UTC](1), float64(6), int64(1), object(1)\nmemory usage: 98.3+ KB\n","output_type":"stream"}],"execution_count":36},{"cell_type":"code","source":"# 스케일링\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ndf_stock[['Open','High', 'Low','Close','Volume']] = scaler.fit_transform(df_stock[['Open','High', 'Low','Close','Volume']])\ndf_stock","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:43:56.862658Z","iopub.execute_input":"2025-02-04T03:43:56.862924Z","iopub.status.idle":"2025-02-04T03:43:56.889382Z","shell.execute_reply.started":"2025-02-04T03:43:56.862891Z","shell.execute_reply":"2025-02-04T03:43:56.888740Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"                            Date      Open      High       Low     Close  \\\n0      2018-11-29 05:00:00+00:00 -1.598199 -1.611253 -1.611061 -1.615618   \n458    2018-11-30 05:00:00+00:00 -1.610310 -1.623753 -1.614516 -1.620572   \n916    2018-12-03 05:00:00+00:00 -1.589000 -1.600423 -1.592958 -1.588704   \n1374   2018-12-04 05:00:00+00:00 -1.606937 -1.613328 -1.618436 -1.630224   \n1832   2018-12-06 05:00:00+00:00 -1.653900 -1.651840 -1.648607 -1.640285   \n...                          ...       ...       ...       ...       ...   \n600507 2023-11-22 05:00:00+00:00  1.546464  1.532611  1.574085  1.539173   \n600998 2023-11-24 05:00:00+00:00  1.533260  1.489798  1.540125  1.510653   \n601489 2023-11-27 05:00:00+00:00  1.513029  1.484947  1.532602  1.506822   \n601980 2023-11-28 05:00:00+00:00  1.510047  1.493594  1.543349  1.519805   \n602471 2023-11-29 05:00:00+00:00  1.533899  1.514895  1.553451  1.508844   \n\n          Volume  Dividends  Stock Splits Company  \n0       1.176835        0.0           0.0    AAPL  \n458     1.010309        0.0           0.0    AAPL  \n916     1.104861        0.0           0.0    AAPL  \n1374    1.145166        0.0           0.0    AAPL  \n1832    1.275657        0.0           0.0    AAPL  \n...          ...        ...           ...     ...  \n600507 -1.193708        0.0           0.0    AAPL  \n600998 -1.483268        0.0           0.0    AAPL  \n601489 -1.176321        0.0           0.0    AAPL  \n601980 -1.216944        0.0           0.0    AAPL  \n602471 -1.624170        0.0           0.0    AAPL  \n\n[1258 rows x 9 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Volume</th>\n      <th>Dividends</th>\n      <th>Stock Splits</th>\n      <th>Company</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2018-11-29 05:00:00+00:00</td>\n      <td>-1.598199</td>\n      <td>-1.611253</td>\n      <td>-1.611061</td>\n      <td>-1.615618</td>\n      <td>1.176835</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>458</th>\n      <td>2018-11-30 05:00:00+00:00</td>\n      <td>-1.610310</td>\n      <td>-1.623753</td>\n      <td>-1.614516</td>\n      <td>-1.620572</td>\n      <td>1.010309</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>916</th>\n      <td>2018-12-03 05:00:00+00:00</td>\n      <td>-1.589000</td>\n      <td>-1.600423</td>\n      <td>-1.592958</td>\n      <td>-1.588704</td>\n      <td>1.104861</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>1374</th>\n      <td>2018-12-04 05:00:00+00:00</td>\n      <td>-1.606937</td>\n      <td>-1.613328</td>\n      <td>-1.618436</td>\n      <td>-1.630224</td>\n      <td>1.145166</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>1832</th>\n      <td>2018-12-06 05:00:00+00:00</td>\n      <td>-1.653900</td>\n      <td>-1.651840</td>\n      <td>-1.648607</td>\n      <td>-1.640285</td>\n      <td>1.275657</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>600507</th>\n      <td>2023-11-22 05:00:00+00:00</td>\n      <td>1.546464</td>\n      <td>1.532611</td>\n      <td>1.574085</td>\n      <td>1.539173</td>\n      <td>-1.193708</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>600998</th>\n      <td>2023-11-24 05:00:00+00:00</td>\n      <td>1.533260</td>\n      <td>1.489798</td>\n      <td>1.540125</td>\n      <td>1.510653</td>\n      <td>-1.483268</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>601489</th>\n      <td>2023-11-27 05:00:00+00:00</td>\n      <td>1.513029</td>\n      <td>1.484947</td>\n      <td>1.532602</td>\n      <td>1.506822</td>\n      <td>-1.176321</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>601980</th>\n      <td>2023-11-28 05:00:00+00:00</td>\n      <td>1.510047</td>\n      <td>1.493594</td>\n      <td>1.543349</td>\n      <td>1.519805</td>\n      <td>-1.216944</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n    <tr>\n      <th>602471</th>\n      <td>2023-11-29 05:00:00+00:00</td>\n      <td>1.533899</td>\n      <td>1.514895</td>\n      <td>1.553451</td>\n      <td>1.508844</td>\n      <td>-1.624170</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>AAPL</td>\n    </tr>\n  </tbody>\n</table>\n<p>1258 rows × 9 columns</p>\n</div>"},"metadata":{}}],"execution_count":37},{"cell_type":"markdown","source":"## 모델 관련","metadata":{}},{"cell_type":"code","source":"# 시계열 데이터 생성\nimport numpy as np\nimport torch\nsequence_length = 5   #5일 단위\n\nfrom tqdm import tqdm\ndef create_sequences(data, seq_length):\n    xs = []\n    ys = []\n    #for i in range(len(data) - seq_length):\n    for i in tqdm(range(len(data) - seq_length), desc='Generating Sequences') :\n        x = data[i:i+seq_length]\n        y = data[i+seq_length]\n        xs.append(x)\n        ys.append(y)\n    return np.array(xs), np.array(ys)   #features, label\n\nfeatures, label = create_sequences(df_stock['Close'].values, sequence_length)\nfeatures.shape, label.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:45:44.810226Z","iopub.execute_input":"2025-02-04T03:45:44.810556Z","iopub.status.idle":"2025-02-04T03:45:44.823129Z","shell.execute_reply.started":"2025-02-04T03:45:44.810529Z","shell.execute_reply":"2025-02-04T03:45:44.822494Z"}},"outputs":[{"name":"stderr","text":"Generating Sequences: 100%|██████████| 1253/1253 [00:00<00:00, 1113917.53it/s]\n","output_type":"stream"},{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"((1253, 5), (1253,))"},"metadata":{}}],"execution_count":42},{"cell_type":"code","source":"features[:3]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:45:49.670562Z","iopub.execute_input":"2025-02-04T03:45:49.670851Z","iopub.status.idle":"2025-02-04T03:45:49.676167Z","shell.execute_reply.started":"2025-02-04T03:45:49.670829Z","shell.execute_reply":"2025-02-04T03:45:49.675434Z"}},"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"array([[-1.61561817, -1.62057201, -1.58870387, -1.63022425, -1.64028513],\n       [-1.62057201, -1.58870387, -1.63022425, -1.64028513, -1.67210203],\n       [-1.58870387, -1.63022425, -1.64028513, -1.67210203, -1.66643324]])"},"metadata":{}}],"execution_count":43},{"cell_type":"markdown","source":"pytorch에 넣으려면 tensor로 바꿔야함","metadata":{}},{"cell_type":"code","source":"# 텐서 변환\nfeatures_tensor = torch.tensor(features, dtype=torch.float32).unsqueeze(-1)\nlabel_tensor = torch.tensor(label, dtype=torch.float32).unsqueeze(-1)\nfeatures_tensor.shape, label_tensor.shape\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:45:51.398475Z","iopub.execute_input":"2025-02-04T03:45:51.398745Z","iopub.status.idle":"2025-02-04T03:45:51.404887Z","shell.execute_reply.started":"2025-02-04T03:45:51.398724Z","shell.execute_reply":"2025-02-04T03:45:51.404099Z"}},"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"(torch.Size([1253, 5, 1]), torch.Size([1253, 1]))"},"metadata":{}}],"execution_count":44},{"cell_type":"code","source":"# RNN 모델 정의\nimport torch.nn as nn\nclass SimpleRNN(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(SimpleRNN, self).__init__()\n        self.rnn = nn.RNN(input_size, hidden_size, batch_first=True)\n        self.fc = nn.Linear(hidden_size, output_size)\n    def forward(self, x):\n        h0 = torch.zeros(1, x.size(0), hidden_size)\n        out, _ = self.rnn(x, h0)\n        out = self.fc(out[:, -1, :])\n        return out\n\ninput_size = 1  # row 단위 개수\nhidden_size = 5  # 은닉층 개수\noutput_size = 1 \n\nmodel = SimpleRNN(input_size, hidden_size, output_size)\nmodel","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:45:53.495109Z","iopub.execute_input":"2025-02-04T03:45:53.495420Z","iopub.status.idle":"2025-02-04T03:45:53.504107Z","shell.execute_reply.started":"2025-02-04T03:45:53.495393Z","shell.execute_reply":"2025-02-04T03:45:53.503383Z"}},"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"SimpleRNN(\n  (rnn): RNN(1, 5, batch_first=True)\n  (fc): Linear(in_features=5, out_features=1, bias=True)\n)"},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"# 모델 학습\nimport torch.optim as optim\n\ncriterion = nn.MSELoss()\noptimizer = optim.AdamW(model.parameters(), lr=0.01)\n\nepochs = 100\n\nfor epoch in tqdm(range(epochs), desc='learning Model'):\n    model.train()\n    outputs = model(features_tensor)\n    optimizer.zero_grad()\n    loss = criterion(outputs, label_tensor)  # 에러율 확인\n    loss.backward()\n    optimizer.step()\n\n    if(epoch+1) % 10 == 0: # 10회에 1번 출력\n        print(f'Epoch [{epoch+1} / {epochs}], Loss : {loss.item():.5f}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:45:54.845995Z","iopub.execute_input":"2025-02-04T03:45:54.846283Z","iopub.status.idle":"2025-02-04T03:45:55.097954Z","shell.execute_reply.started":"2025-02-04T03:45:54.846261Z","shell.execute_reply":"2025-02-04T03:45:55.097004Z"}},"outputs":[{"name":"stderr","text":"learning Model:  84%|████████▍ | 84/100 [00:00<00:00, 415.32it/s]","output_type":"stream"},{"name":"stdout","text":"Epoch [10 / 100], Loss : 1.09582\nEpoch [20 / 100], Loss : 0.93990\nEpoch [30 / 100], Loss : 0.62080\nEpoch [40 / 100], Loss : 0.07892\nEpoch [50 / 100], Loss : 0.12041\nEpoch [60 / 100], Loss : 0.05702\nEpoch [70 / 100], Loss : 0.05011\nEpoch [80 / 100], Loss : 0.03038\nEpoch [90 / 100], Loss : 0.01859\n","output_type":"stream"},{"name":"stderr","text":"learning Model: 100%|██████████| 100/100 [00:00<00:00, 411.44it/s]","output_type":"stream"},{"name":"stdout","text":"Epoch [100 / 100], Loss : 0.01212\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}],"execution_count":46},{"cell_type":"code","source":"model.state_dict()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:45:57.230485Z","iopub.execute_input":"2025-02-04T03:45:57.230866Z","iopub.status.idle":"2025-02-04T03:45:57.239491Z","shell.execute_reply.started":"2025-02-04T03:45:57.230834Z","shell.execute_reply":"2025-02-04T03:45:57.238532Z"}},"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"OrderedDict([('rnn.weight_ih_l0',\n              tensor([[-0.1331],\n                      [ 0.4082],\n                      [ 0.0763],\n                      [ 0.3573],\n                      [ 0.2162]])),\n             ('rnn.weight_hh_l0',\n              tensor([[-0.0334, -0.6449, -0.1109, -0.6376, -0.1674],\n                      [-0.1997,  0.0406, -0.3041, -0.0319,  0.6760],\n                      [-0.0926,  0.0694, -0.3472,  0.7327,  0.4694],\n                      [ 0.1424,  0.4940, -0.1992,  0.4636,  0.3400],\n                      [ 0.3217,  0.5623,  0.1251,  0.4164,  0.1239]])),\n             ('rnn.bias_ih_l0',\n              tensor([ 0.1017, -0.3952, -0.4655,  0.1836, -0.2004])),\n             ('rnn.bias_hh_l0',\n              tensor([ 0.0793, -0.4148, -0.2355,  0.3823,  0.3362])),\n             ('fc.weight',\n              tensor([[-0.4319,  0.1826,  0.3501,  0.4438,  0.4973]])),\n             ('fc.bias', tensor([0.0425]))])"},"metadata":{}}],"execution_count":47},{"cell_type":"markdown","source":"# 평가 관련","metadata":{}},{"cell_type":"code","source":"model.eval()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:47:41.463188Z","iopub.execute_input":"2025-02-04T03:47:41.463500Z","iopub.status.idle":"2025-02-04T03:47:41.468679Z","shell.execute_reply.started":"2025-02-04T03:47:41.463473Z","shell.execute_reply":"2025-02-04T03:47:41.468061Z"}},"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"SimpleRNN(\n  (rnn): RNN(1, 5, batch_first=True)\n  (fc): Linear(in_features=5, out_features=1, bias=True)\n)"},"metadata":{}}],"execution_count":48},{"cell_type":"code","source":"with torch.no_grad():\n    predicted = model(features_tensor[:5])\npredicted, label_tensor[:5]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-04T03:48:55.017933Z","iopub.execute_input":"2025-02-04T03:48:55.018253Z","iopub.status.idle":"2025-02-04T03:48:55.025006Z","shell.execute_reply.started":"2025-02-04T03:48:55.018228Z","shell.execute_reply":"2025-02-04T03:48:55.024294Z"}},"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"(tensor([[-1.4597],\n         [-1.4676],\n         [-1.4710],\n         [-1.4733],\n         [-1.4739]]),\n tensor([[-1.6721],\n         [-1.6664],\n         [-1.6714],\n         [-1.6690],\n         [-1.6595]]))"},"metadata":{}}],"execution_count":51},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}