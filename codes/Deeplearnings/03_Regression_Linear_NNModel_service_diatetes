{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"provenance":[],"authorship_tag":"ABX9TyOOIVXOdGkYqPuxZYi8g8dS","include_colab_link":true},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<a href=\"https://colab.research.google.com/github/jwyzfe/study_NLPs/blob/main/codes/Deeplearning/03_Regression_Linear_diatetes.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>","metadata":{"id":"view-in-github"}},{"cell_type":"markdown","source":"## 데이터 수집","metadata":{"id":"z4BUmwQmJXIv"}},{"cell_type":"code","source":"from sklearn.datasets import load_diabetes\ndata_diabetes = load_diabetes()\nfeatures, label = data_diabetes.data, data_diabetes.target\nfeatures.shape, label.shape","metadata":{"id":"jC2Cdhl1J3e2","outputId":"daa9fabd-60af-408d-cd48-bdd63206f45f","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T08:29:27.423632Z","iopub.execute_input":"2025-02-03T08:29:27.424016Z","iopub.status.idle":"2025-02-03T08:29:29.119759Z","shell.execute_reply.started":"2025-02-03T08:29:27.423979Z","shell.execute_reply":"2025-02-03T08:29:29.118662Z"}},"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"((442, 10), (442,))"},"metadata":{}}],"execution_count":1},{"cell_type":"markdown","source":"","metadata":{"id":"g6C8ZCpbJ3K9"}},{"cell_type":"markdown","source":"###데이터 전처리\n- 데이터 분석","metadata":{"id":"xYqsjBL6JZ99"}},{"cell_type":"markdown","source":"## 데이터 분할\n- train, test, validation","metadata":{"id":"slpnTMUFJcx1"}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\ntrain_features, test_features, train_label, test_label = train_test_split(features, label, test_size=0.2, random_state=42)","metadata":{"id":"8_Q6RPQQKuKO","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T08:29:29.120850Z","iopub.execute_input":"2025-02-03T08:29:29.121346Z","iopub.status.idle":"2025-02-03T08:29:29.234410Z","shell.execute_reply.started":"2025-02-03T08:29:29.121315Z","shell.execute_reply":"2025-02-03T08:29:29.233250Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"import torch","metadata":{"id":"1PLymSg7LbA2","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T08:29:29.235739Z","iopub.execute_input":"2025-02-03T08:29:29.236116Z","iopub.status.idle":"2025-02-03T08:29:33.648309Z","shell.execute_reply.started":"2025-02-03T08:29:29.236083Z","shell.execute_reply":"2025-02-03T08:29:33.647059Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"train_features_tensor = torch.tensor(train_features, dtype=torch.float32)\ntrain_label_tensor = torch.tensor(train_label,dtype=torch.float32).view(-1,1) # 행렬 모양으로 변경\n#test_features_tensor = torch.tensor(test_features)\n#test_label_tensor = torch.tensor(test_label)\ntype(train_features_tensor), type(train_label_tensor), train_label_tensor.shape","metadata":{"id":"O7KPVPkDLzom","outputId":"3d9eaec2-5b57-4e68-977c-1c82881711eb","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T08:29:33.649333Z","iopub.execute_input":"2025-02-03T08:29:33.649772Z","iopub.status.idle":"2025-02-03T08:29:33.694606Z","shell.execute_reply.started":"2025-02-03T08:29:33.649741Z","shell.execute_reply":"2025-02-03T08:29:33.693439Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"(torch.Tensor, torch.Tensor, torch.Size([353, 1]))"},"metadata":{}}],"execution_count":4},{"cell_type":"markdown","source":"## 모델 학습","metadata":{"id":"HqrN4d3DJtTe"}},{"cell_type":"code","source":"import torch\n# Neural model linear regression \nclass LinearRegressionNNM(torch.nn.Module):\n  def __init__(self, input_dim, ):  # input_dim:reatures 열 갯수\n    super(LinearRegressionNNM, self).__init__()\n    self.hidden_1 = torch.nn.Linear(input_dim, 64)\n    self.hidden_2 = torch.nn.Linear(64, 32)\n    self.hidden_3 = torch.nn.Linear(32, 16)\n    self.output = torch.nn.Linear(16, 1)\n    self.relu = torch.nn.ReLU() #Activation Function\n    \n      \n      \n\n  def forward(self, x):\n    x = self.relu(self.hidden_1(x)) #hidden layer1\n    x = self.relu(self.hidden_2(x))\n    x = self.relu(self.hidden_3(x))\n    out = self.output(x)  #result\n    return out","metadata":{"id":"wq2KAqWiMNgO","trusted":true,"execution":{"iopub.status.busy":"2025-02-03T08:29:33.695926Z","iopub.execute_input":"2025-02-03T08:29:33.696753Z","iopub.status.idle":"2025-02-03T08:29:33.706318Z","shell.execute_reply.started":"2025-02-03T08:29:33.696679Z","shell.execute_reply":"2025-02-03T08:29:33.705322Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"loaded_model = LinearRegressionNNM(10)\nloaded_model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T08:29:54.253150Z","iopub.execute_input":"2025-02-03T08:29:54.253449Z","iopub.status.idle":"2025-02-03T08:29:54.262638Z","shell.execute_reply.started":"2025-02-03T08:29:54.253415Z","shell.execute_reply":"2025-02-03T08:29:54.261487Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"LinearRegressionNNM(\n  (hidden_1): Linear(in_features=10, out_features=64, bias=True)\n  (hidden_2): Linear(in_features=64, out_features=32, bias=True)\n  (hidden_3): Linear(in_features=32, out_features=16, bias=True)\n  (output): Linear(in_features=16, out_features=1, bias=True)\n  (relu): ReLU()\n)"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"loaded_state_dict = torch.load(\"/kaggle/working/linear_regression_nnm.pyh\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T08:31:42.728715Z","iopub.execute_input":"2025-02-03T08:31:42.729091Z","iopub.status.idle":"2025-02-03T08:31:42.736592Z","shell.execute_reply.started":"2025-02-03T08:31:42.729059Z","shell.execute_reply":"2025-02-03T08:31:42.735271Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-20-8207109673aa>:1: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n  loaded_state_dict = torch.load(\"/kaggle/working/linear_regression_nnm.pyh\")\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"loaded_model.load_state_dict(loaded_state_dict)\nloaded_model.eval()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T08:33:09.111512Z","iopub.execute_input":"2025-02-03T08:33:09.111934Z","iopub.status.idle":"2025-02-03T08:33:09.119768Z","shell.execute_reply.started":"2025-02-03T08:33:09.111871Z","shell.execute_reply":"2025-02-03T08:33:09.118546Z"}},"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"LinearRegressionNNM(\n  (hidden_1): Linear(in_features=10, out_features=64, bias=True)\n  (hidden_2): Linear(in_features=64, out_features=32, bias=True)\n  (hidden_3): Linear(in_features=32, out_features=16, bias=True)\n  (output): Linear(in_features=16, out_features=1, bias=True)\n  (relu): ReLU()\n)"},"metadata":{}}],"execution_count":21},{"cell_type":"markdown","source":"## 데이터 예측 서비스","metadata":{}},{"cell_type":"code","source":"# 데이터 로딩과 일부 사용\nfrom sklearn.datasets import load_diabetes\ndata_diabetes = load_diabetes()\nfeatures, label = data_diabetes.data, data_diabetes.target\nfeatures.shape, label.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T08:35:48.626429Z","iopub.execute_input":"2025-02-03T08:35:48.626786Z","iopub.status.idle":"2025-02-03T08:35:48.637852Z","shell.execute_reply.started":"2025-02-03T08:35:48.626750Z","shell.execute_reply":"2025-02-03T08:35:48.636832Z"}},"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"((442, 10), (442,))"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"features[:3]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T08:36:03.770002Z","iopub.execute_input":"2025-02-03T08:36:03.770338Z","iopub.status.idle":"2025-02-03T08:36:03.777165Z","shell.execute_reply.started":"2025-02-03T08:36:03.770313Z","shell.execute_reply":"2025-02-03T08:36:03.776036Z"}},"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"array([[ 0.03807591,  0.05068012,  0.06169621,  0.02187239, -0.0442235 ,\n        -0.03482076, -0.04340085, -0.00259226,  0.01990749, -0.01764613],\n       [-0.00188202, -0.04464164, -0.05147406, -0.02632753, -0.00844872,\n        -0.01916334,  0.07441156, -0.03949338, -0.06833155, -0.09220405],\n       [ 0.08529891,  0.05068012,  0.04445121, -0.00567042, -0.04559945,\n        -0.03419447, -0.03235593, -0.00259226,  0.00286131, -0.02593034]])"},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"features_tensor = torch.tensor(features[:3], dtype=torch.float32)\n#features_tensor\nwith torch.no_grad():\n    predicts = loaded_model(features_tensor)\npredicts.numpy()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-03T08:39:20.126227Z","iopub.execute_input":"2025-02-03T08:39:20.126584Z","iopub.status.idle":"2025-02-03T08:39:20.135055Z","shell.execute_reply.started":"2025-02-03T08:39:20.126553Z","shell.execute_reply":"2025-02-03T08:39:20.133801Z"}},"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"array([[217.25415 ],\n       [ 89.304565],\n       [196.04272 ]], dtype=float32)"},"metadata":{}}],"execution_count":27},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}